<?php namespace Modules\User\Repositories\Eloquent;

use Modules\Core\Repositories\Eloquent\EloquentBaseRepository;
use Modules\Media\Entities\File;
use Modules\Place\Entities\Follow as PlaceFollow;
use Modules\User\Entities\CollectionFolder;
use Modules\User\Entities\Friend;
use Modules\User\Repositories\StatsRepository;

class EloquentStatsRepository extends EloquentBaseRepository implements StatsRepository {
    /**
     * Update stats
     * @param $user_id
     * @return object
     */
    public function cron($user_id) {
        $friend = Friend::where(function($query) use ($user_id) {
            $query->where('user_id', $user_id)->orWhere('friend_id', $user_id);
        })->where('connected', 1)->count();
        $follow = PlaceFollow::where('user_id', $user_id)->count();
        $picture = File::where('user_id', $user_id)
            ->where('object_id', '<>', 'temp')
            ->whereIn('object', [MEDIA_SUB_REVIEW])
            ->count();
        $collection = CollectionFolder::where('user_id', $user_id)->count();

        $data = [
            'friend'     => $friend,
            'follow'     => $follow,
            'picture'    => $picture,
            'collection' => $collection,
            'updated_at' => date('Y-m-d H:i:s')
        ];

        $stats = $this->findByAttributes(['user_id' => $user_id]);

        if (!$stats) {
            $stats = $this->create(array_merge($data, ['user_id' => $user_id]));
        } else {
            $stats = $this->update($stats, $data);
        }

        return $stats;
    }
}
